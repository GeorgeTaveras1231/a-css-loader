(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	var builder = __webpack_require__(1).cssModuleBuilder;

	exports.default = builder(
	"513edab926d7391ba2ba72cc61291872",
	".a--aff13 {\n  color: red;\n}\n",
	{
		"a": ["a--aff13"]},
	[

	]
	);

	module.exports = exports.default;

/***/ },
/* 1 */
/***/ function(module, exports) {

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var stringify = JSON.stringify;

	var CSSModulePrototype = Object.create(Array.prototype, {
	  toString: {
	    value: function toString() {
	      var visited = {};
	      var css = '';

	      reverseEach(this, function (module) {
	        var id = module[0];
	        var newCSS = module[1];

	        if (visited[id]) return;

	        visited[id] = true;

	        css += newCSS;
	      })

	      return css;
	    }
	  },
	  id: {
	    get: function() {
	      return this[0][0];
	    }
	  },
	  __is_css_module__: { value: true }
	});


	function reverseEach(array, cb) {
	  for (var i = array.length - 1; i >= 0; i-- ) {
	    cb.call(null, array[i], i);
	  }
	}

	function eachClassName(module, localName, cb) {
	  var importedModules;

	  if (typeof module.locals === 'object') {
	    importedModules = module.locals[localName];
	  } else {
	    importedModules = module[localName];
	  }

	  (importedModules || '').split(' ').forEach(cb);
	}

	function composeLocals(classNamesOrImports) {
	  var uniqueClassNames = {};

	  if (typeof classNamesOrImports === 'string') {
	    classNamesOrImports = classNamesOrImports.split(' ');
	  }

	  classNamesOrImports.forEach(function (classNameOrImport) {
	    /* Its an import if its an array */
	    if (Array.isArray(classNameOrImport)) {
	      eachClassName(classNameOrImport[0], classNameOrImport[1], function (importedClassName) {
	        uniqueClassNames[importedClassName] = true;
	      });

	      return;
	    }

	    uniqueClassNames[classNameOrImport] = true;
	  });

	  return Object.keys(uniqueClassNames).join(' ');
	}

	function processLocals(locals) {
	  var newLocals = {};
	  var key;

	  for (key in locals) {
	    if (hasOwnProperty.call(locals, key)) {
	      newLocals[key] = composeLocals(locals[key]);
	    }
	  }

	  return newLocals;
	}

	var nonCSSModuleImportId = 0;
	function processImports(parentModule, imports) {
	  return imports.map(function (module) {
	    if (module.__is_css_module__) {
	      return module;
	    }

	    var css = typeof module.toCssString === 'function' ? module.toCssString() : '';

	    return cssModuleBuilder(
	      parentModule.id + '/import__' + nonCSSModuleImportId++,
	      css,
	      module.locals,
	      []
	    )
	  });
	}

	function cssModuleBuilder(moduleId, css, locals, imports) {
	  var module = [];

	  /* Change the prototype of array to add method overrides that are not 'own keys' */
	  /* This is kinda strange I know. I tried making a separate constructor that inherits from
	   * The Array.prototype but the ExtractTextPlugin depends on the modules being native arrays.
	   **/
	  module.__proto__ = CSSModulePrototype;

	  module.push([
	    moduleId,
	    css,
	    null
	  ]);

	  processImports(module, imports).forEach(function (i) {
	    module.push.apply(module, i);
	  });

	  module.locals = processLocals(locals);

	  return module;
	}

	exports.cssModuleBuilder = cssModuleBuilder;


/***/ }
/******/ ])
});
;